"use strict";(self.webpackChunkcodeshift_community=self.webpackChunkcodeshift_community||[]).push([[2528],{3905:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>f});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function s(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?s(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function a(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=c(o),m=r,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||s;return o?n.createElement(f,i(i({ref:t},u),{},{components:o})):n.createElement(f,i({ref:t},u))}));function f(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=o.length,i=new Array(s);i[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[d]="string"==typeof e?e:r,i[1]=a;for(var c=2;c<s;c++)i[c]=o[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},9359:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var n=o(7462),r=(o(7294),o(3905));const s={id:"testing",title:"Testing",slug:"/testing",description:"Learn how to test your codemods. This page covers the different methods and tools you can use to ensure that your codemods are working correctly, including unit tests, integration tests, and end-to-end tests. We'll also discuss best practices for writing effective tests that can help you catch bugs and improve the quality of your codemods.",keywords:["testing","codemods","unit tests","integration tests","end-to-end tests","best practices"]},i=void 0,a={unversionedId:"testing",id:"testing",title:"Testing",description:"Learn how to test your codemods. This page covers the different methods and tools you can use to ensure that your codemods are working correctly, including unit tests, integration tests, and end-to-end tests. We'll also discuss best practices for writing effective tests that can help you catch bugs and improve the quality of your codemods.",source:"@site/docs/testing.mdx",sourceDirName:".",slug:"/testing",permalink:"/docs/testing",draft:!1,editUrl:"https://github.com/hypermod-io/hypermod-community/edit/main/website/docs/testing.mdx",tags:[],version:"current",frontMatter:{id:"testing",title:"Testing",slug:"/testing",description:"Learn how to test your codemods. This page covers the different methods and tools you can use to ensure that your codemods are working correctly, including unit tests, integration tests, and end-to-end tests. We'll also discuss best practices for writing effective tests that can help you catch bugs and improve the quality of your codemods.",keywords:["testing","codemods","unit tests","integration tests","end-to-end tests","best practices"]},sidebar:"docs",previous:{title:"Configuration",permalink:"/docs/configuration"},next:{title:"Motions",permalink:"/docs/motions"}},l={},c=[{value:"Folder structure",id:"folder-structure",level:2},{value:"An example",id:"an-example",level:2},{value:"Considerations",id:"considerations",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Learn how to test your codemods. This page covers the different methods and tools you can use to ensure that your codemods are working correctly, including unit tests, integration tests, and end-to-end tests.\nWe'll also discuss best practices for writing effective tests that can help you catch bugs and improve the quality of your codemods."),(0,r.kt)("p",null,"It's very likely that consumers will run into all sorts of edge-cases when running your codemod. That's why it's important to always start by writing tests (TDD style) to assert its behavior.\nThink about a start and end state. How you might be able to achieve that? What edge-cases can potentially arise?"),(0,r.kt)("p",null,"Hypermod (and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/jscodeshift#unit-testing"},"jscodeshift"),") exposes ",(0,r.kt)("a",{parentName:"p",href:"/docs/utils"},"testing utilities")," to help."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Codemods are a textbook example of where TDD works. You have an input file, you run the script and you get output. Thus I would really recommend using TDD for codemod projects.\nNot only does it make codemods more stable, but having projects with test workflow setup, will help you learn.\nBecause you can experiment just by running the same test over and over again.")),(0,r.kt)("p",null,"\u2013 ",(0,r.kt)("a",{parentName:"p",href:"https://katilius.dev/writing-js-codemods/#setting-up-codemod-project-for-tdd-workflow"},"Reference")),(0,r.kt)("h2",{id:"folder-structure"},"Folder structure"),(0,r.kt)("p",null,"If you're planning to publish a codemod to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hypermod-io/hypermod-community/tree/main/community"},"the public registry"),", follow the ",(0,r.kt)("a",{parentName:"p",href:"/docs/authoring#initializing"},"Authoring guide"),"."),(0,r.kt)("p",null,"Once you've initialized, your file structure should look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"community/[package-name]/[version]\n  /transform.ts\n  /transform.spec.ts // Here's where your test should go\n")),(0,r.kt)("h2",{id:"an-example"},"An example"),(0,r.kt)("p",null,"To give an example, consider you're trying to write a codemod that removes deprecated props from a component.\nIn this case, you would be able to write a simple test using ",(0,r.kt)("inlineCode",{parentName:"p"},"jest")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"@hypermod/utils")," like so.."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { applyTransform } from '@hypermod/utils';\n\nimport * as transformer from '../transform';\n\nit('should remove all deleted props', async () => {\n  const result = await applyTransform(\n    transformer,\n    `\n      import Foo from '@mylib/foo';\n\n      const App = () => <Foo isSelected doNotUse='true' />;\n    `,\n    { parser: 'tsx' },\n  );\n\n  expect(result).toMatchInlineSnapshot(`\n    \"\n    import Foo from '@mylib/foo';\n\n    const App = () => <Foo isSelected />;\"\n  `);\n});\n")),(0,r.kt)("p",null,"Great, but what have we missed? What might go wrong?"),(0,r.kt)("h2",{id:"considerations"},"Considerations"),(0,r.kt)("p",null,"Whenever you're writing tests for a codemod, it's usually good to consider a few classic gotchas."),(0,r.kt)("p",null,"In general they can include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Import aliasing: ",(0,r.kt)("inlineCode",{parentName:"li"},"import { Foo as Bar } from '@mylib/foo';")),(0,r.kt)("li",{parentName:"ul"},"Idempotency: Will a codemod produce the same result if run multiple times on the same file"),(0,r.kt)("li",{parentName:"ul"},"Indirection: Is the code your modifying being obscured by indirection?"),(0,r.kt)("li",{parentName:"ul"},"Equivalent syntax: ",(0,r.kt)("inlineCode",{parentName:"li"},"function foo() {}")," vs ",(0,r.kt)("inlineCode",{parentName:"li"},"const foo = () => {}"))))}p.isMDXComponent=!0}}]);