"use strict";(self.webpackChunkcodeshift_community=self.webpackChunkcodeshift_community||[]).push([[2816],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=p(t),u=r,m=g["".concat(s,".").concat(u)]||g[u]||d[u]||o;return t?a.createElement(m,i(i({ref:n},c),{},{components:t})):a.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2867:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(8168),r=(t(6540),t(5680));const o={id:"external-packages",title:"External Packages",slug:"/external-packages",description:"Learn how to create stand-alone Hypermod packages. This page covers the process of packaging your codemods as standalone npm packages, including tips and best practices for creating packages that are easy to use and maintain.",keywords:["codeshift","package","creation","npm","tips","best practices"]},i=void 0,l={unversionedId:"external-packages",id:"external-packages",title:"External Packages",description:"Learn how to create stand-alone Hypermod packages. This page covers the process of packaging your codemods as standalone npm packages, including tips and best practices for creating packages that are easy to use and maintain.",source:"@site/docs/external-packages.mdx",sourceDirName:".",slug:"/external-packages",permalink:"/docs/external-packages",draft:!1,editUrl:"https://github.com/hypermod-io/hypermod-community/edit/main/website/docs/external-packages.mdx",tags:[],version:"current",frontMatter:{id:"external-packages",title:"External Packages",slug:"/external-packages",description:"Learn how to create stand-alone Hypermod packages. This page covers the process of packaging your codemods as standalone npm packages, including tips and best practices for creating packages that are easy to use and maintain.",keywords:["codeshift","package","creation","npm","tips","best practices"]},sidebar:"docs",previous:{title:"Contribution",permalink:"/docs/contribution"},next:{title:"Your first codemod",permalink:"/docs/your-first-codemod"}},s={},p=[{value:"Initializing",id:"initializing",level:2},{value:"File structure",id:"file-structure",level:3},{value:"Testing",id:"testing",level:2},{value:"Publishing",id:"publishing",level:2},{value:"Examples",id:"examples",level:2}],c={toc:p},g="wrapper";function d(e){let{components:n,...t}=e;return(0,r.yg)(g,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"This page covers creation of stand-alone Hypermod packages and is for authors who want:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Control over where and how your Hypermod package is hosted"),(0,r.yg)("li",{parentName:"ul"},"Control over tooling, dependencies and techstack"),(0,r.yg)("li",{parentName:"ul"},"The option to create completely generic codemods that don't target specific packages")),(0,r.yg)("p",null,"If you prefer to not to maintain a separate package, please see the ",(0,r.yg)("a",{parentName:"p",href:"authoring"},"Authoring guide")," for other options."),(0,r.yg)("h2",{id:"initializing"},"Initializing"),(0,r.yg)("p",null,"To create a standalone Hypermod package automatically, install the install and use the ",(0,r.yg)("inlineCode",{parentName:"p"},"hypermod/cli"),"."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"npm:")," ",(0,r.yg)("inlineCode",{parentName:"li"},"npm install -g @hypermod/cli")," or"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"yarn:")," ",(0,r.yg)("inlineCode",{parentName:"li"},"yarn global add @hypermod/cli"))),(0,r.yg)("p",null,'Then given you want to initialize a new project called "foobar", with a codemod targeting version ',(0,r.yg)("inlineCode",{parentName:"p"},"10.0.0")," you can run the following command:"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},'$ hypermod init --package-name="foobar" --version="10.0.0" ~/Desktop')),(0,r.yg)("p",null,'This will create a new directory called "foobar" in the ',(0,r.yg)("inlineCode",{parentName:"p"},"~/Desktop")," directory."),(0,r.yg)("p",null,"You can then also initialize subsequent transforms and presets by running the command again:"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},'$ hypermod init --package-name="foobar" --preset="sort-imports" ~/Desktop')),(0,r.yg)("h3",{id:"file-structure"},"File structure"),(0,r.yg)("p",null,"The file structure of your new hypermod package will look like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"react-cool-library/\n  hypermod.config.js // main entrypoint containing configuration and references to your transforms\n  package.json\n  tsconfig.json\n  jest.config.js\n  codemods/\n    10.0.0/ // semver version\n      transform.ts // main logic (should contain a transformer)\n      transform.spec.ts // main tests\n      motions/ // utility directory\n")),(0,r.yg)("h2",{id:"testing"},"Testing"),(0,r.yg)("p",null,"Now to test your transformer, run ",(0,r.yg)("inlineCode",{parentName:"p"},"yarn test --watch"),"."),(0,r.yg)("p",null,"See the ",(0,r.yg)("a",{parentName:"p",href:"testing"},"Testing guide")," for help getting started with unit tests."),(0,r.yg)("h2",{id:"publishing"},"Publishing"),(0,r.yg)("p",null,"Since your new hypermod package can simply be treated as an NPM package you can simply run ",(0,r.yg)("inlineCode",{parentName:"p"},"npm version [patch\\minor\\major]")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"npm publish"),"."),(0,r.yg)("p",null,"Your package will now be accessible via the ",(0,r.yg)("inlineCode",{parentName:"p"},"hypermod/cli"),". Refer to the ",(0,r.yg)("a",{parentName:"p",href:"consuming"},"Consuming guide")," for information about how to run your new codemods."),(0,r.yg)("h2",{id:"examples"},"Examples"),(0,r.yg)("p",null,"Here are some helpful example of this setup working in the wild:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/atlassian-labs/compiled/tree/master/packages/codemods"},"Compiled codemods")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/webdriverio/codemod"},"Webdriver.io codemods"))))}d.isMDXComponent=!0}}]);