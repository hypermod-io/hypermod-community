"use strict";(self.webpackChunkcodeshift_community=self.webpackChunkcodeshift_community||[]).push([[3628],{9850:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>d});var s=n(4848),i=n(8453);const c={id:"utils",title:"hypermod/utils",slug:"/utils"},o=void 0,t={id:"api/utils",title:"hypermod/utils",description:"Hypermod provides a set of utilities to help perform common codemod operations.",source:"@site/docs/api/hypermod-utils.mdx",sourceDirName:"api",slug:"/utils",permalink:"/hypermod-community/docs/utils",draft:!1,unlisted:!1,editUrl:"https://github.com/hypermod-io/hypermod-community/edit/main/website/docs/api/hypermod-utils.mdx",tags:[],version:"current",frontMatter:{id:"utils",title:"hypermod/utils",slug:"/utils"},sidebar:"api",previous:{title:"hypermod/cli",permalink:"/hypermod-community/docs/cli"}},l={},d=[{value:"Installation",id:"installation",level:2},{value:"Nodes",id:"nodes",level:2},{value:"<code>isNodeOfType</code>",id:"isnodeoftype",level:3},{value:"<code>isDecendantOfType</code>",id:"isdecendantoftype",level:3},{value:"Imports",id:"imports",level:2},{value:"<code>hasImportDeclaration</code>",id:"hasimportdeclaration",level:3},{value:"<code>getImportDeclaration</code>",id:"getimportdeclaration",level:3},{value:"<code>removeImportDeclaration</code>",id:"removeimportdeclaration",level:3},{value:"<code>renameImportDeclaration</code>",id:"renameimportdeclaration",level:3},{value:"<code>getDefaultImportSpecifier</code>",id:"getdefaultimportspecifier",level:3},{value:"<code>getDefaultImportSpecifierName</code>",id:"getdefaultimportspecifiername",level:3},{value:"<code>hasDefaultImportSpecifier</code>",id:"hasdefaultimportspecifier",level:3},{value:"<code>removeDefaultImportSpecifier</code>",id:"removedefaultimportspecifier",level:3},{value:"<code>hasImportSpecifier</code>",id:"hasimportspecifier",level:3},{value:"<code>getImportSpecifier</code>",id:"getimportspecifier",level:3},{value:"<code>getImportSpecifierName</code>",id:"getimportspecifiername",level:3},{value:"<code>insertImportSpecifier</code>",id:"insertimportspecifier",level:3},{value:"<code>removeImportSpecifier</code>",id:"removeimportspecifier",level:3},{value:"JSX",id:"jsx",level:2},{value:"<code>getJSXAttributes</code>",id:"getjsxattributes",level:3},{value:"<code>hasJSXAttributes</code>",id:"hasjsxattributes",level:3},{value:"Comments",id:"comments",level:2},{value:"<code>insertCommentBefore</code>",id:"insertcommentbefore",level:3},{value:"<code>insertCommentToStartOfFile</code>",id:"insertcommenttostartoffile",level:3},{value:"Motions",id:"motions",level:2},{value:"<code>applyMotions</code>",id:"applymotions",level:3},{value:"Testing",id:"testing",level:2},{value:"<code>applyTransform</code>",id:"applytransform",level:3}];function a(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.p,{children:"Hypermod provides a set of utilities to help perform common codemod operations."}),"\n",(0,s.jsx)(r.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"@hypermod/utils"})," is pre-bundled with every codemod that is published to ",(0,s.jsx)(r.a,{href:"https://github.com/hypermod-io/hypermod-community/tree/main/community",children:"the public registry"}),",\nso there's no need to install it manually."]}),"\n",(0,s.jsx)(r.p,{children:"However, it is also available for use outside of this project and compatible with jscodeshift."}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"npm install --save-dev @hypermod/utils"})," or ",(0,s.jsx)(r.code,{children:"yarn add -D @hypermod/utils"})]}),"\n",(0,s.jsx)(r.h2,{id:"nodes",children:"Nodes"}),"\n",(0,s.jsx)(r.h3,{id:"isnodeoftype",children:(0,s.jsx)(r.code,{children:"isNodeOfType"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"isNodeOfType(node, type)"})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"isNodeOfType"})," function uses generics to check if a node of type ",(0,s.jsx)(r.code,{children:"ASTNode"})," is of a specified type.\nIf the check passes, the type of node is narrowed to the expected type, ensuring that the returned type of the function is always correct."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"boolean"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"const isImportSpecifier = isNodeOfType(node, 'ImportSpecifier');\n"})}),"\n",(0,s.jsx)(r.h3,{id:"isdecendantoftype",children:(0,s.jsx)(r.code,{children:"isDecendantOfType"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"isDecendantOfType(j, path, type)"})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"isDecendantOfType"})," function traverses the AST to determind if the given path is a child of a node of the specified type."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"boolean"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"const isChildOfImportSpecifier = isDecendantOfType(j, path, j.ImportSpecifier);\n"})}),"\n",(0,s.jsx)(r.h2,{id:"imports",children:"Imports"}),"\n",(0,s.jsx)(r.h3,{id:"hasimportdeclaration",children:(0,s.jsx)(r.code,{children:"hasImportDeclaration"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"hasImportDeclaration(j, source, sourcePath)"})}),"\n",(0,s.jsx)(r.p,{children:"Finds an import declaration by source name"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"boolean"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React from 'react';\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { hasImportDeclaration } from '@hypermod/utils';\n\nhasImportDeclaration(j, source, 'react'); // True\n"})}),"\n",(0,s.jsx)(r.h3,{id:"getimportdeclaration",children:(0,s.jsx)(r.code,{children:"getImportDeclaration"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"getImportDeclaration(j, source, sourcePath)"})}),"\n",(0,s.jsx)(r.p,{children:"Returns an import declaration by source name"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Collection"}),": Collection containing 1 or more imports"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React from 'react';\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { getImportDeclaration } from '@hypermod/utils';\n\ngetImportDeclaration(j, source, 'react');\n"})}),"\n",(0,s.jsx)(r.h3,{id:"removeimportdeclaration",children:(0,s.jsx)(r.code,{children:"removeImportDeclaration"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"removeImportDeclaration(j, source, sourcePath)"})}),"\n",(0,s.jsx)(r.p,{children:"Removes an import declaration by source name"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"void"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React from 'react';\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { removeImportDeclaration } from '@hypermod/utils';\n\nremoveImportDeclaration(j, source, 'react');\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-diff",children:"// src/App.js\n-import React, { useEffect } from 'react';\n"})}),"\n",(0,s.jsx)(r.h3,{id:"renameimportdeclaration",children:(0,s.jsx)(r.code,{children:"renameImportDeclaration"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"renameImportDeclaration(j, source, sourcePath, newSourcePath)"})}),"\n",(0,s.jsx)(r.p,{children:"Renames an import declaration by source name"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"void"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React from 'react';\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { renameImportDeclaration } from '@hypermod/utils';\n\nrenameImportDeclaration(j, source, 'react', 'preact');\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-diff",children:"// src/App.js\n-import React, { useEffect } from 'react';\n+import React, { useEffect } from 'preact';\n"})}),"\n",(0,s.jsx)(r.h3,{id:"getdefaultimportspecifier",children:(0,s.jsx)(r.code,{children:"getDefaultImportSpecifier"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"getDefaultImportSpecifier(j, source, sourcePath)"})}),"\n",(0,s.jsx)(r.p,{children:"Finds a default import specifier"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Collection"}),": Collection containing all matched default import specifiers"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React from 'react';\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { getDefaultImportSpecifier } from '@hypermod/utils';\n\ngetDefaultImportSpecifier(j, source, 'react'); // Collection containing 'React'\n"})}),"\n",(0,s.jsx)(r.h3,{id:"getdefaultimportspecifiername",children:(0,s.jsx)(r.code,{children:"getDefaultImportSpecifierName"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"getDefaultImportSpecifierName(j, source, sourcePath)"})}),"\n",(0,s.jsx)(r.p,{children:"Finds a default import specifier and returns its name"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"string | null"}),": Default import's name"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React from 'react';\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { getDefaultImportSpecifierName } from '@hypermod/utils';\n\ngetDefaultImportSpecifierName(j, source, 'react'); // Collection containing 'React'\n"})}),"\n",(0,s.jsx)(r.h3,{id:"hasdefaultimportspecifier",children:(0,s.jsx)(r.code,{children:"hasDefaultImportSpecifier"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"hasDefaultImportSpecifier(j, source, sourcePath)"})}),"\n",(0,s.jsx)(r.p,{children:"Attempts to find a default import specifier and returns a boolean result"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"boolean"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React from 'react';\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { hasDefaultImportSpecifier } from '@hypermod/utils';\n\nhasDefaultImportSpecifier(j, source, 'react'); // True\n"})}),"\n",(0,s.jsx)(r.h3,{id:"removedefaultimportspecifier",children:(0,s.jsx)(r.code,{children:"removeDefaultImportSpecifier"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"removeDefaultImportSpecifier(j, source, sourcePath)"})}),"\n",(0,s.jsx)(r.p,{children:"Attempts to remove a default import specifier"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"void"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React, { useEffect } from 'react';\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { removeDefaultImportSpecifier } from '@hypermod/utils';\n\nremoveDefaultImportSpecifier(j, source, 'React');\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-diff",children:"-import React, { useEffect } from 'react';\n+import { useEffect } from 'react';\n"})}),"\n",(0,s.jsx)(r.h3,{id:"hasimportspecifier",children:(0,s.jsx)(r.code,{children:"hasImportSpecifier"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"hasImportSpecifier(j, source, sourcePath)"})}),"\n",(0,s.jsx)(r.p,{children:"Checks for an import import specifier"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"boolean"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React, { useEffect } from 'react';\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { hasImportSpecifier } from '@hypermod/utils';\n\nhasImportSpecifier(j, source, 'react', 'useEffect'); // True\n"})}),"\n",(0,s.jsx)(r.h3,{id:"getimportspecifier",children:(0,s.jsx)(r.code,{children:"getImportSpecifier"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"getImportSpecifier(j, specifier, source)"})}),"\n",(0,s.jsx)(r.p,{children:"Finds an import specifier by name"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Collection"}),": Collection containing all matched import specifiers"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React, { useEffect } from 'react';\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { getImportSpecifier } from '@hypermod/utils';\n\ngetImportSpecifier(j, source, 'useEffect'); // Collection containing 'useEffect'\n"})}),"\n",(0,s.jsx)(r.h3,{id:"getimportspecifiername",children:(0,s.jsx)(r.code,{children:"getImportSpecifierName"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"getImportSpecifierName(j, specifier, source)"})}),"\n",(0,s.jsx)(r.p,{children:"Returns the local name of an import. This is useful for cases where an import specifier is potentially aliased."}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"string"})," | null: specifier name or null if not found"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React, { useEffect as foo } from 'react';\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { getImportSpecifierName } from '@hypermod/utils';\n\ngetImportSpecifierName(j, source, 'useEffect', 'react'); // 'foo'\n"})}),"\n",(0,s.jsx)(r.h3,{id:"insertimportspecifier",children:(0,s.jsx)(r.code,{children:"insertImportSpecifier"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"insertImportSpecifier(j, source, specifier)"})}),"\n",(0,s.jsx)(r.p,{children:"Inserts an import specifier"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"void"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React, { useEffect } from 'react';\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { insertImportSpecifier } from '@hypermod/utils';\n\ninsertImportSpecifier(j, source, 'useMemo', 'react'); // Collection containing 'useEffect'\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-diff",children:"// src/App.js\n-import React, { useEffect } from 'react';\n+import React, { useEffect, useMemo } from 'react';\n"})}),"\n",(0,s.jsx)(r.h3,{id:"removeimportspecifier",children:(0,s.jsx)(r.code,{children:"removeImportSpecifier"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"removeImportSpecifier(j, source, specifier)"})}),"\n",(0,s.jsx)(r.p,{children:"Removes an import specifier"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"void"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React, { useEffect } from 'react';\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { removeImportSpecifier } from '@hypermod/utils';\n\nremoveImportSpecifier(j, source, 'useMemo', 'react'); // Collection containing 'useEffect'\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-diff",children:"// src/App.js\n-import React, { useEffect } from 'react';\n+import React, { useEffect, useMemo } from 'react';\n"})}),"\n",(0,s.jsx)(r.h2,{id:"jsx",children:"JSX"}),"\n",(0,s.jsx)(r.h3,{id:"getjsxattributes",children:(0,s.jsx)(r.code,{children:"getJSXAttributes"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"getJSXAttributes(j, source, attributeName)"})}),"\n",(0,s.jsx)(r.p,{children:"Finds a JSX attributeName (aka prop) by name"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Collection"}),": Collection containing all matched jsx attributes"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { getJSXAttributes } from '@hypermod/utils';\n\ngetJSXAttributes(j, source, 'primary'); // Collection containing 'primary'\n"})}),"\n",(0,s.jsx)(r.h3,{id:"hasjsxattributes",children:(0,s.jsx)(r.code,{children:"hasJSXAttributes"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"hasJSXAttributes(j, source, attributeName)"})}),"\n",(0,s.jsx)(r.p,{children:"Finds a JSX attributeName (aka prop) by name and returns true if found"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"boolean"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { hasJSXAttributes } from '@hypermod/utils';\n\nhasJSXAttributes(j, source, 'primary'); // Found!\n"})}),"\n",(0,s.jsx)(r.h2,{id:"comments",children:"Comments"}),"\n",(0,s.jsx)(r.h3,{id:"insertcommentbefore",children:(0,s.jsx)(r.code,{children:"insertCommentBefore"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"insertCommentBefore(j, source, message, prefix)"})}),"\n",(0,s.jsx)(r.p,{children:"Appends a comment before the provided node"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"void"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { insertCommentBefore } from '@hypermod/utils';\n\ninsertCommentBefore(\n  j,\n  path.find(j.ImportDeclaration),\n  'This should be removed in favour of mylib',\n);\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"// src/App.js\nimport React from 'react';\n\n// TODO: (@hypermod) This should be removed in favour of mylib\nconst App = () => <Button primary>Say hello</Button>;\n"})}),"\n",(0,s.jsx)(r.h3,{id:"insertcommenttostartoffile",children:(0,s.jsx)(r.code,{children:"insertCommentToStartOfFile"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"insertCommentToStartOfFile(j, source, message)"})}),"\n",(0,s.jsx)(r.p,{children:"Appends a comment to the start of a file"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"void"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"// src/App.js\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { insertCommentToStartOfFile } from '@hypermod/utils';\n\ninsertCommentToStartOfFile(\n  j,\n  path.find(j.ImportDeclaration),\n  'This should be removed in favour of mylib',\n);\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"// src/App.js\n// TODO: (Codemod) This should be removed in favour of mylib\nimport React from 'react';\n\nconst App = () => <Button primary>Say hello</Button>;\n"})}),"\n",(0,s.jsx)(r.h2,{id:"motions",children:"Motions"}),"\n",(0,s.jsx)(r.h3,{id:"applymotions",children:(0,s.jsx)(r.code,{children:"applyMotions"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"applyMotions(j, source, motions)"})}),"\n",(0,s.jsx)(r.p,{children:"A helper function to apply an array of motions in sequence."}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"void"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { applyMotions } from '@hypermod/utils';\nimport { sortImports } from './motions';\n\napplyMotions(j, j(fileInfo.source), [sortImports, removeVar]);\n"})}),"\n",(0,s.jsx)(r.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(r.h3,{id:"applytransform",children:(0,s.jsx)(r.code,{children:"applyTransform"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"applyTransform(transform, input, options = { parser: 'babel' })"})}),"\n",(0,s.jsx)(r.p,{children:"Runs a transform against the provided code and returns the resulting file."}),"\n",(0,s.jsxs)(r.p,{children:["We provide this method as opposed to ",(0,s.jsx)(r.a,{href:"https://github.com/facebook/jscodeshift#unit-testing",children:"jscodeshift's test utils"})," to maintain jest's skip/only and snapshot features"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Promise<string>"}),": Resulting file after transform has been applied"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-jsx",children:"import * as transformer from '../transform';\nimport { applyTransform } from '@hypermod/utils';\n\nit('should wrap avatar in a tooltip if name is defined', async () => {\n  const result = await applyTransform(\n    transformer,\n    `\n      import Avatar from 'avatar';\n\n      const App = () => {\n        return <Avatar name=\"foo\" />;\n      }\n    `,\n    { parser: 'tsx' },\n  );\n\n  expect(result).toMatchInlineSnapshot(`\n    \"import Tooltip from 'tooltip';\n    import Avatar from 'avatar';\n\n    const App = () => {\n      return <Tooltip content=\\\\\"foo\\\\\"><Avatar name=\\\\\"foo\\\\\" /></Tooltip>;\n    }\"\n  `);\n});\n"})})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>t});var s=n(6540);const i={},c=s.createContext(i);function o(e){const r=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(c.Provider,{value:r},e.children)}}}]);