"use strict";(self.webpackChunkcodeshift_community=self.webpackChunkcodeshift_community||[]).push([[7980],{5680:(e,n,o)=>{o.d(n,{xA:()=>m,yg:()=>y});var t=o(6540);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function a(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?a(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)o=a[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=t.createContext({}),c=function(e){var n=t.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},m=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(o),u=r,y=p["".concat(s,".").concat(u)]||p[u]||d[u]||a;return o?t.createElement(y,i(i({ref:n},m),{},{components:o})):t.createElement(y,i({ref:n},m))}));function y(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=o[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}u.displayName="MDXCreateElement"},2165:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=o(8168),r=(o(6540),o(5680));const a={id:"consuming",title:"Consuming",slug:"/consuming",description:"Learn how to consume codemods. This page covers the different ways you can use codemods to automatically refactor your codebase, including integrating them into your development workflow and running them from the command line.",keywords:["codemod","consuming","refactor","codebase","development workflow","command line"]},i=void 0,l={unversionedId:"consuming",id:"consuming",title:"Consuming",description:"Learn how to consume codemods. This page covers the different ways you can use codemods to automatically refactor your codebase, including integrating them into your development workflow and running them from the command line.",source:"@site/docs/consuming.mdx",sourceDirName:".",slug:"/consuming",permalink:"/docs/consuming",draft:!1,editUrl:"https://github.com/hypermod-io/hypermod-community/edit/main/website/docs/consuming.mdx",tags:[],version:"current",frontMatter:{id:"consuming",title:"Consuming",slug:"/consuming",description:"Learn how to consume codemods. This page covers the different ways you can use codemods to automatically refactor your codebase, including integrating them into your development workflow and running them from the command line.",keywords:["codemod","consuming","refactor","codebase","development workflow","command line"]},sidebar:"docs",previous:{title:"Authoring",permalink:"/docs/authoring"},next:{title:"Configuration",permalink:"/docs/configuration"}},s={},c=[{value:"How to run Community codemods",id:"how-to-run-community-codemods",level:2},{value:"Run codemods in sequence",id:"run-codemods-in-sequence",level:2},{value:"Running local transforms",id:"running-local-transforms",level:2},{value:"Parsing TypeScript &amp; Flow",id:"parsing-typescript--flow",level:2}],m={toc:c},p="wrapper";function d(e){let{components:n,...o}=e;return(0,r.yg)(p,(0,t.A)({},m,o,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Running codemods is made simple through our CLI tool, ",(0,r.yg)("a",{parentName:"p",href:"/docs/cli"},"@hypermod/cli"),"."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"@hypermod/cli is responsible for running the provided transform against your entire codebase. Under the hood, it is a wrapper of jscodeshift's cli, which provides additional functionality")),(0,r.yg)("p",null,"For usage please refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/cli"},"@hypermod/cli API reference"),"."),(0,r.yg)("h2",{id:"how-to-run-community-codemods"},"How to run Community codemods"),(0,r.yg)("p",null,"To run a hypermod package, install and use the ",(0,r.yg)("inlineCode",{parentName:"p"},"@hypermod/cli"),"."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"npm:")," ",(0,r.yg)("inlineCode",{parentName:"li"},"npm install -g @hypermod/cli")," or"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"yarn:")," ",(0,r.yg)("inlineCode",{parentName:"li"},"yarn global add @hypermod/cli"))),(0,r.yg)("p",null,"For example, say we want to run transforms for ",(0,r.yg)("inlineCode",{parentName:"p"},"@mylib/button")," and migrate from version 13 to the latest version 14, we could run the following:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"codemod-cli --packages @mylib/button@14.0.0 project/path/to/src\n")),(0,r.yg)("p",null,"The following sequence of events will follow:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"@hypermod/cli")," will then attempt to download a Hypermod package for the ",(0,r.yg)("inlineCode",{parentName:"li"},"@mylib/button")," package matching version ",(0,r.yg)("inlineCode",{parentName:"li"},"14.0.0")),(0,r.yg)("li",{parentName:"ol"},"Download the package from NPM"),(0,r.yg)("li",{parentName:"ol"},"Locate the ",(0,r.yg)("inlineCode",{parentName:"li"},"hypermod.config.js")),(0,r.yg)("li",{parentName:"ol"},"Attempt to find a ",(0,r.yg)("inlineCode",{parentName:"li"},"transform")," for ",(0,r.yg)("inlineCode",{parentName:"li"},"14.0.0")),(0,r.yg)("li",{parentName:"ol"},"Run the transform against the path ",(0,r.yg)("inlineCode",{parentName:"li"},"project/path/to/src"))),(0,r.yg)("h2",{id:"run-codemods-in-sequence"},"Run codemods in sequence"),(0,r.yg)("p",null,"It's also possible to run a series of codemods, one after the other, to migrate your usage of ",(0,r.yg)("inlineCode",{parentName:"p"},"@mylib/button")," across multiple major versions, from say v14, v15 and finally v16. Assuming codemods for those versions exist."),(0,r.yg)("p",null,"This is done my providing the ",(0,r.yg)("inlineCode",{parentName:"p"},"--sequence")," (or ",(0,r.yg)("inlineCode",{parentName:"p"},"-s"),") flag to ",(0,r.yg)("inlineCode",{parentName:"p"},"@hypermod/cli"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"codemod-cli --packages @mylib/button@14.0.0 --sequence project/path/to/src\n")),(0,r.yg)("p",null,"This time around, we use the provided version (14.0.0) as the start of a semver range between ",(0,r.yg)("inlineCode",{parentName:"p"},"14.0.0-@latest"),".\nWe then fetch all codemods that match and run them one after another."),(0,r.yg)("h2",{id:"running-local-transforms"},"Running local transforms"),(0,r.yg)("p",null,"For local transform files, not published to the community repo, you can supply your own transform the same way you would with jscodeshift."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"codemod-cli --transform path/to/transform.ts project/path/to/src\n")),(0,r.yg)("h2",{id:"parsing-typescript--flow"},"Parsing TypeScript & Flow"),(0,r.yg)("p",null,"By default ",(0,r.yg)("inlineCode",{parentName:"p"},"@hypermod/cli")," will use ",(0,r.yg)("inlineCode",{parentName:"p"},"babel")," as the default parser and only transform files with a ",(0,r.yg)("inlineCode",{parentName:"p"},".js")," extensions."),(0,r.yg)("p",null,"If your repo depends on flow or typescript, it's important to remember to specify ",(0,r.yg)("inlineCode",{parentName:"p"},"ts"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"tsx")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"flow")," as the ",(0,r.yg)("inlineCode",{parentName:"p"},"--parser")," and or ",(0,r.yg)("inlineCode",{parentName:"p"},"jsx, ts, tsx")," as ",(0,r.yg)("inlineCode",{parentName:"p"},"--extensions")," to make sure jscodeshift can interpret the files properly."),(0,r.yg)("p",null,"Please refer to the ",(0,r.yg)("a",{parentName:"p",href:"/docs/cli"},"@hypermod/cli API reference")," for more information."))}d.isMDXComponent=!0}}]);