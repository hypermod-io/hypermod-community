"use strict";(self.webpackChunkcodeshift_community=self.webpackChunkcodeshift_community||[]).push([[1835],{3041:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var t=i(4848),o=i(8453);const r={id:"contribution",title:"Contribution",slug:"/contribution",description:"Learn how to contribute codemods. This page covers the process of authoring and publishing codemods, including tips and best practices for creating high-quality codemods that others can use and benefit from.",keywords:["codemod","contribution","authoring","publishing","tips","best practices"]},s=void 0,c={id:"contribution",title:"Contribution",description:"Learn how to contribute codemods. This page covers the process of authoring and publishing codemods, including tips and best practices for creating high-quality codemods that others can use and benefit from.",source:"@site/docs/contribution.mdx",sourceDirName:".",slug:"/contribution",permalink:"/docs/contribution",draft:!1,unlisted:!1,editUrl:"https://github.com/hypermod-io/hypermod-community/edit/main/website/docs/contribution.mdx",tags:[],version:"current",frontMatter:{id:"contribution",title:"Contribution",slug:"/contribution",description:"Learn how to contribute codemods. This page covers the process of authoring and publishing codemods, including tips and best practices for creating high-quality codemods that others can use and benefit from.",keywords:["codemod","contribution","authoring","publishing","tips","best practices"]},sidebar:"docs",previous:{title:"Motions",permalink:"/docs/motions"},next:{title:"External Packages",permalink:"/docs/external-packages"}},a={},d=[{value:"Getting setup",id:"getting-setup",level:2},{value:"Initializing",id:"initializing",level:2},{value:"File structure",id:"file-structure",level:3},{value:"Writing a transformer",id:"writing-a-transformer",level:2},{value:"Testing",id:"testing",level:2},{value:"Publishing",id:"publishing",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This page covers the process of authoring and publishing codemods, including tips and best practices for creating high-quality codemods that others can use and benefit from."}),"\n",(0,t.jsxs)(n.p,{children:["It is intended to explain in detail contribution to ",(0,t.jsx)(n.a,{href:"https://github.com/hypermod-io/hypermod-community/tree/main/community",children:"the public registry"})," and is for authors who want:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Codemods to be open source"}),"\n",(0,t.jsx)(n.li,{children:"Build tooling, dependency management and project setup to be handled for you"}),"\n",(0,t.jsx)(n.li,{children:"The community to help maintain and contribute to your codemods"}),"\n",(0,t.jsxs)(n.li,{children:["Documentation to be automatically generated and available on the ",(0,t.jsx)(n.a,{href:"registry",children:"Registry page"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["If you prefer to create codemods outside of this repo, please see the ",(0,t.jsx)(n.a,{href:"authoring",children:"Authoring guide"})," for other options."]}),"\n",(0,t.jsx)(n.h2,{id:"getting-setup",children:"Getting setup"}),"\n",(0,t.jsxs)(n.p,{children:["To get setup, first fork this repository and clone it to your local machine.\nMake sure you have the correct version of node and yarn(1.x) installed.\nFinally, run ",(0,t.jsx)(n.code,{children:"yarn"})," to install the dependencies."]}),"\n",(0,t.jsx)(n.h2,{id:"initializing",children:"Initializing"}),"\n",(0,t.jsxs)(n.p,{children:["Create a new hypermod package automatically by running: ",(0,t.jsx)(n.code,{children:"yarn hypermod:init -p [package-name] -v [version]"})]}),"\n",(0,t.jsxs)(n.p,{children:["For example: ",(0,t.jsx)(n.code,{children:"yarn community:init react-cool-library 10.0.0"})]}),"\n",(0,t.jsxs)(n.p,{children:["And for scoped packages: ",(0,t.jsx)(n.code,{children:"yarn community:init @scope/react-cool-library 10.0.0"})]}),"\n",(0,t.jsxs)(n.p,{children:["You should now see a new folder within the ",(0,t.jsx)(n.code,{children:"/community"})," directory for you to implement your codemod(s)."]}),"\n",(0,t.jsx)(n.h3,{id:"file-structure",children:"File structure"}),"\n",(0,t.jsx)(n.p,{children:"The file structure of your new hypermod package will look like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"community/react-cool-library/\n  hypermod.config.js // main entrypoint containing configuration and references to your transforms\n  10.0.0/ // semver version\n    transform.ts // main logic (should contain a transformer)\n    transform.spec.ts // main tests\n    motions/ // utility directory\n"})}),"\n",(0,t.jsx)(n.h2,{id:"writing-a-transformer",children:"Writing a transformer"}),"\n",(0,t.jsxs)(n.p,{children:["The logic for your codemod should be added to the ",(0,t.jsx)(n.code,{children:"transform.ts"})," file."]}),"\n",(0,t.jsx)(n.p,{children:"Transformers are the main entrypoint to your codemod, they are responsible for accepting a raw file, applying the appropriate modifications to it and finally outputting the resulting AST to the original file."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { hasImportDeclaration } from '@hypermod/utils';\n\nexport default function transformer(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  if (!hasImportDeclaration(j, source, 'my')) {\n    return file.source; // Writes original untouched file\n  }\n\n  // Do transformation logic here...\n\n  return source.toSource(options.printOptions); // Writes modified AST to file\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For a more detailed guide, please refer to the ",(0,t.jsx)(n.a,{href:"your-first-codemod",children:"Your First Codemod guide"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,t.jsxs)(n.p,{children:["Now to test your transformer, run ",(0,t.jsx)(n.code,{children:"yarn test:watch community/[package-name]"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"testing",children:"Testing guide"})," for help getting started with unit tests."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Make sure to write a healthy amount of unit tests"}),"\n",(0,t.jsx)(n.li,{children:"This is a great opportunity for test driven development"}),"\n",(0,t.jsx)(n.li,{children:"Consider different edge-cases, idempotency, different languages (js, flow, typescript)"}),"\n",(0,t.jsx)(n.li,{children:"Before you share your changes with the world, be sure to use it yourself"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"publishing",children:"Publishing"}),"\n",(0,t.jsx)(n.p,{children:"Once you're happy with your new package and you've tested it appropriately, it's time to raise a PR."}),"\n",(0,t.jsxs)(n.p,{children:["When the PR is reviewed and merged, your new package will automatically be published and available via the ",(0,t.jsx)(n.code,{children:"hypermod/cli"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Refer to the ",(0,t.jsx)(n.a,{href:"consuming",children:"Consuming guide"})," for information about how to run your new codemods."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var t=i(6540);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);