"use strict";(self.webpackChunkcodeshift_community=self.webpackChunkcodeshift_community||[]).push([[8879],{2226:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var r=t(4848),i=t(8453);const o={id:"typescript",title:"TypeScript",slug:"/typescript",description:"Learn how to write codemods to modify common TypeScript. This guide will teach you how to update variable and interface types using jscodeshift.",keywords:["typescript","codemod","codemorph","jscodeshift"]},s=void 0,c={id:"recipes/typescript",title:"TypeScript",description:"Learn how to write codemods to modify common TypeScript. This guide will teach you how to update variable and interface types using jscodeshift.",source:"@site/docs/recipes/typescript.mdx",sourceDirName:"recipes",slug:"/typescript",permalink:"/docs/typescript",draft:!1,unlisted:!1,editUrl:"https://github.com/hypermod-io/hypermod-community/edit/main/website/docs/recipes/typescript.mdx",tags:[],version:"current",frontMatter:{id:"typescript",title:"TypeScript",slug:"/typescript",description:"Learn how to write codemods to modify common TypeScript. This guide will teach you how to update variable and interface types using jscodeshift.",keywords:["typescript","codemod","codemorph","jscodeshift"]},sidebar:"docs",previous:{title:"React & JSX",permalink:"/docs/react"}},a={},d=[{value:"Types",id:"types",level:2},{value:"Creating a type annotation",id:"creating-a-type-annotation",level:3},{value:"Union types",id:"union-types",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Interfaces",id:"interfaces",level:2},{value:"Renaming an interface",id:"renaming-an-interface",level:3},{value:"Adding interface properties",id:"adding-interface-properties",level:3},{value:"Modifying interface properties",id:"modifying-interface-properties",level:3},{value:"Optional properties",id:"optional-properties",level:3},{value:"Extending other interfaces",id:"extending-other-interfaces",level:3},{value:"Annotations",id:"annotations",level:2},{value:"Adding types to variables",id:"adding-types-to-variables",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Head:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t,{children:[(0,r.jsx)("title",{children:"TypeScript"}),(0,r.jsx)("link",{rel:"canonical",href:"https://hypermod.io/docs/guides/typescript"})]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["This guide has been moved to a new location. Please visit the new ",(0,r.jsx)(n.a,{href:"https://hypermod.io/docs/guides/typescript",children:"Typescript guide"}),"."]})}),"\n",(0,r.jsx)(n.p,{children:"If you're looking to modify TypeScript code in bulk, jscodeshift can be incredibly helpful.\nIn this guide, we'll explore how you can use jscodeshift to modify common TypeScript syntaxes.\nWhether you're looking to update the types of variables or interfaces, this guide will provide you with the knowledge and tools you need to get started."}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Remember to use the ",(0,r.jsx)(n.code,{children:"ts"})," or ",(0,r.jsx)(n.code,{children:"tsx"})," parser when modifying TypeScript files."]})}),"\n",(0,r.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,r.jsxs)(n.p,{children:["TypeScript ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-aliases",children:"type aliases"})," allow you to give a name to a specific type or combination of types,\nwhich can be reused throughout your code. A type alias is like a shortcut that\nallows you to define a new name for a more complex type or set of types,\nmaking your code more concise and easier to read."]}),"\n",(0,r.jsxs)(n.p,{children:["In jscodeshift, these are represented by the node: ",(0,r.jsx)(n.code,{children:"TSTypeAliasDeclaration"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"creating-a-type-annotation",children:"Creating a type annotation"}),"\n",(0,r.jsxs)(n.p,{children:["If you wanted to construct a new type, you could do so using one of the TypeScript's ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#the-primitives-string-number-and-boolean",children:"primitive types"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"j.tsBooleanKeyword()"}),": ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"j.tsStringKeyword()"}),": ",(0,r.jsx)(n.code,{children:"string"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"j.tsNumberKeyword()"}),": ",(0,r.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"In addition, TypeScript provides a range of basic types."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"j.tsNullKeyword()"}),": ",(0,r.jsx)(n.code,{children:"null"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"j.tsAnyKeyword()"}),": ",(0,r.jsx)(n.code,{children:"any"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"j.tsUnknownKeyword()"}),": ",(0,r.jsx)(n.code,{children:"unknown"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"j.tsVoidKeyword()"}),": ",(0,r.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export default function transformer(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  // Build a new type\n  const newType = j.tsTypeAliasDeclaration(\n    j.identifier('Potato'), // type name \"potato\"\n    j.tsBooleanKeyword() // boolean type annotation\n  );\n\n  // Insert it at the top of the document\n  source.get().node.program.body.unshift(newType);\n\n  return source.toSource();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type Potato = boolean;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"union-types",children:"Union types"}),"\n",(0,r.jsxs)(n.p,{children:["As we know with TypeScript, it's possible for different type annotations to be combined using ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types",children:"union types"}),".\nThese are represented with the ",(0,r.jsx)(n.code,{children:"j.TSUnionType"})," node."]}),"\n",(0,r.jsx)(n.p,{children:"To construct a union type containing two arbitrary strings, you could do the following."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export default function transformer(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  // Build a new type\n  const newType = j.tsTypeAliasDeclaration(\n    j.identifier('Potato'), // type name \"potato\"\n    // Create a union type with two components\n    j.tsUnionType([\n      j.tsLiteralType(j.stringLiteral('foo')),\n      j.tsLiteralType(j.stringLiteral('bar')),\n    ])\n  );\n\n  // Insert it at the top of the document\n  source.get().node.program.body.unshift(newType);\n\n  return source.toSource();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type Potato = 'foo' | 'bar';\n"})}),"\n",(0,r.jsx)(n.h3,{id:"arrays",children:"Arrays"}),"\n",(0,r.jsxs)(n.p,{children:["Similary, ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#arrays",children:"TypeScript arrays"})," can be constructed\nby using the ",(0,r.jsx)(n.code,{children:"j.tsArrayType()"})," and passing in one of the primitive types mentioned above."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export default function transformer(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  // Build a new type\n  const newType = j.tsTypeAliasDeclaration(\n    j.identifier('Potato'), // type name \"potato\"\n    j.tsArrayType(j.tsStringKeyword()) // array of strings type annotation\n  );\n\n  // Insert it at the top of the document\n  source.get().node.program.body.unshift(newType);\n\n  return source.toSource();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type Potato = string[];\n"})}),"\n",(0,r.jsx)(n.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,r.jsxs)(n.p,{children:["A TypeScript ",(0,r.jsx)(n.code,{children:"interface"})," is known as a ",(0,r.jsx)(n.code,{children:"TSInterfaceDeclaration"}),". These can me found and modified the same as any other node."]}),"\n",(0,r.jsx)(n.h3,{id:"renaming-an-interface",children:"Renaming an interface"}),"\n",(0,r.jsx)(n.p,{children:"For example, if you wanted to modify the name of a particular interface you could do the following."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const oldName = 'Lunch';\nconst newName = 'Breakfast';\n\nexport default function transformer(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  source\n  \t.find(j.TSInterfaceDeclaration, { id: { name: oldName }}) // Find all TSInterfacDeclarations with the name \"Lunch\"\n    .forEach(path => path.node.id.name = newName); // Replace it with \"Breakfast\"\n\n  return source.toSource();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Input:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface Lunch {\n  cheese: string;\n  burger: number;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"-interface Lunch {\n+interface Breakfast {\n  cheese: string;\n  burger: number;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"adding-interface-properties",children:"Adding interface properties"}),"\n",(0,r.jsxs)(n.p,{children:["A property of interface is known as a ",(0,r.jsx)(n.code,{children:"TSPropertySignature"}),", representing the individual members which make up the ",(0,r.jsx)(n.code,{children:"interface"})," itself.\n",(0,r.jsx)(n.code,{children:"TSPropertySignatures"})," simply wrap a ",(0,r.jsx)(n.code,{children:"TSTypeAnnotation"})," which we have already seen in above."]}),"\n",(0,r.jsxs)(n.p,{children:["Adding a property to an existing ",(0,r.jsx)(n.code,{children:"interface"})," includes modifying the ",(0,r.jsx)(n.code,{children:"body"})," array of the ",(0,r.jsx)(n.code,{children:"InterfaceDeclaration"}),".\nFor example, to add ",(0,r.jsx)(n.code,{children:"icecream: string"})," you could do the following."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export default function transformer(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  source\n  \t.find(j.TSInterfaceDeclaration, { id: { name: oldName }}) // Find all TSInterfacDeclarations with the name \"Lunch\"\n  \t.forEach(path => {\n      // Insert a new property called 'icecream' with a `string` primitive type\n      path.node.body.body = [\n        ...path.node.body.body,\n        j.tsPropertySignature(j.identifier('icecream'), j.tsTypeAnnotation(j.tsStringKeyword()))\n      ];\n    });\n\n\n  return source.toSource();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Input:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface Lunch {\n  cheese: string;\n  burger: number;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"interface Lunch {\n  cheese: string;\n  burger: number;\n+ icecream: string;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"modifying-interface-properties",children:"Modifying interface properties"}),"\n",(0,r.jsxs)(n.p,{children:["Modifying interface properties can be a lot more straightforward since you can simply\nfilter by the interface and property name, then simply replace the ",(0,r.jsx)(n.code,{children:"typeAnnotation"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, if we wanted to replace the ",(0,r.jsx)(n.code,{children:"TSTypeAnnotation"})," of the ",(0,r.jsx)(n.code,{children:"icecream"})," property with\na string literal type ",(0,r.jsx)(n.code,{children:"vanilla"})," instead of a ",(0,r.jsx)(n.code,{children:"string"})," we could do the following."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export default function transformer(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  source\n  \t.find(j.TSInterfaceDeclaration, { id: { name: 'Lunch' }}) // Find all TSInterfacDeclarations with the name \"Lunch\"\n    .find(j.TSPropertySignature, { key: { name: 'icecream' }}) // Find all TSPropertySignatures with the name \"icecream\"\n  \t.forEach(path => {\n      // Replace the type annotation with a string literal type 'vanilla'\n      path.node.typeAnnotation = j.tsTypeAnnotation(j.tsLiteralType(j.stringLiteral('vanilla')));\n    });\n\n  return source.toSource();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Input:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface Lunch {\n  cheese: string;\n  burger: number;\n  icecream: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"interface Lunch {\n  cheese: string;\n  burger: number;\n+ icecream: 'vanilla';\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"optional-properties",children:"Optional properties"}),"\n",(0,r.jsxs)(n.p,{children:["In TypeScript, interface properties can be marked as ",(0,r.jsx)(n.code,{children:"optional"})," with the ",(0,r.jsx)(n.code,{children:"?"})," keyword.\nThe same can be done in a codemod by setting the ",(0,r.jsx)(n.code,{children:"optional"})," argument when creating the node."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export default function transformer(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  source\n  \t.find(j.TSInterfaceDeclaration, { id: { name: 'Lunch' }}) // Find all TSInterfacDeclarations with the name \"Lunch\"\n    .forEach(path => {\n      // Insert a new property called 'icecream' with a `string` primitive type\n      path.node.body.body = [\n        ...path.node.body.body,\n        j.tsPropertySignature(\n          j.identifier('icecream'), j.tsTypeAnnotation(j.tsStringKeyword())),\n          true // specifies that the icecream property is optional\n      ];\n    });\n\n  return source.toSource();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Input:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface Lunch {\n  cheese: string;\n  burger: number;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"interface Lunch {\n  cheese: string;\n  burger: number;\n+ icecream?: string;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"extending-other-interfaces",children:"Extending other interfaces"}),"\n",(0,r.jsxs)(n.p,{children:["Interfaces can extend other interfaces. As an AST these are represented as\nan array of ",(0,r.jsx)(n.code,{children:"TSExpressionWithTypeArguments"})," on the ",(0,r.jsx)(n.code,{children:"extends"})," property of an ",(0,r.jsx)(n.code,{children:"interface"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export default function transformer(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  source\n  \t.find(j.TSInterfaceDeclaration, { id: { name: oldName }}) // Find all TSInterfacDeclarations with the name \"Lunch\"\n    .forEach(path => path.node.extends = [ // Replace the extisting extends property\n    \tj.tsExpressionWithTypeArguments(j.identifier('Snacks')), // Create a new `TSExoressionWithTypeArguments` array\n    ]);\n\n\n  return source.toSource();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Input:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface Snacks {\n  fries: string;\n}\n\ninterface Lunch {\n  cheese: string;\n  burger: number;\n  icecream: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"interface Snacks {\n  fries: string;\n}\n\n+interface Lunch extends Snacks {\n  cheese: string;\n  burger: number;\n  icecream: 'vanilla';\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"annotations",children:"Annotations"}),"\n",(0,r.jsx)(n.h3,{id:"adding-types-to-variables",children:"Adding types to variables"}),"\n",(0,r.jsxs)(n.p,{children:["Adding type annotations to an existing ",(0,r.jsx)(n.code,{children:"VariableDeclarator"})," involves assigning a type node\nto the ",(0,r.jsx)(n.code,{children:"typeAnnotation"})," property."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"export default function transformer(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  source\n    .find(j.VariableDeclarator)\n    .find(j.Identifier, { name: 'dog' }) // Filter by name === 'dog'\n    // Add a typeAnnotation property to the node\n    .forEach(path => path.node.typeAnnotation = j.tsTypeAnnotation(j.tsStringKeyword()));\n\n  return source.toSource();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Input:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const dog = 'Poodle';\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:"-const dog = 'Poodle';\n+const dog: string = 'Poodle';\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(6540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);