"use strict";(self.webpackChunkcodeshift_community=self.webpackChunkcodeshift_community||[]).push([[7195],{5680:(e,o,n)=>{n.d(o,{xA:()=>c,yg:()=>u});var a=n(6540);function r(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function t(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);o&&(a=a.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?t(Object(n),!0).forEach((function(o){r(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function s(e,o){if(null==e)return{};var n,a,r=function(e,o){if(null==e)return{};var n,a,r={},t=Object.keys(e);for(a=0;a<t.length;a++)n=t[a],o.indexOf(n)>=0||(r[n]=e[n]);return r}(e,o);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(a=0;a<t.length;a++)n=t[a],o.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var o=a.useContext(p),n=o;return e&&(n="function"==typeof e?e(o):i(i({},o),e)),n},c=function(e){var o=l(e.components);return a.createElement(p.Provider,{value:o},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var o=e.children;return a.createElement(a.Fragment,{},o)}},g=a.forwardRef((function(e,o){var n=e.components,r=e.mdxType,t=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),g=r,u=d["".concat(p,".").concat(g)]||d[g]||m[g]||t;return n?a.createElement(u,i(i({ref:o},c),{},{components:n})):a.createElement(u,i({ref:o},c))}));function u(e,o){var n=arguments,r=o&&o.mdxType;if("string"==typeof e||r){var t=n.length,i=new Array(t);i[0]=g;var s={};for(var p in o)hasOwnProperty.call(o,p)&&(s[p]=o[p]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<t;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6578:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>t,metadata:()=>s,toc:()=>l});var a=n(8168),r=(n(6540),n(5680));const t={id:"monorepos",title:"Integrating with monorepos",slug:"/monorepos",description:"Learn about monorepos and how they can be used with Hypermod. This page covers the benefits of using a monorepo for your codebase, including improved organization, collaboration, and scalability. We'll also discuss how to use hypermod to automatically refactor code in a monorepo and the best practices for working with monorepos and codemods.",keywords:["monorepos","workspaces","lerna","yarn","scalability","packages"]},i=void 0,s={unversionedId:"guides/monorepos",id:"guides/monorepos",title:"Integrating with monorepos",description:"Learn about monorepos and how they can be used with Hypermod. This page covers the benefits of using a monorepo for your codebase, including improved organization, collaboration, and scalability. We'll also discuss how to use hypermod to automatically refactor code in a monorepo and the best practices for working with monorepos and codemods.",source:"@site/docs/guides/monorepos.mdx",sourceDirName:"guides",slug:"/monorepos",permalink:"/docs/monorepos",draft:!1,editUrl:"https://github.com/hypermod-io/hypermod-community/edit/main/website/docs/guides/monorepos.mdx",tags:[],version:"current",frontMatter:{id:"monorepos",title:"Integrating with monorepos",slug:"/monorepos",description:"Learn about monorepos and how they can be used with Hypermod. This page covers the benefits of using a monorepo for your codebase, including improved organization, collaboration, and scalability. We'll also discuss how to use hypermod to automatically refactor code in a monorepo and the best practices for working with monorepos and codemods.",keywords:["monorepos","workspaces","lerna","yarn","scalability","packages"]},sidebar:"docs",previous:{title:"CSS codemods via PostCSS",permalink:"/docs/css-codemods"},next:{title:"Import manipulation",permalink:"/docs/import-manipulation"}},p={},l=[{value:"Configuration",id:"configuration",level:2},{value:"Initializing",id:"initializing",level:2},{value:"Development",id:"development",level:2},{value:"Publishing",id:"publishing",level:2},{value:"Running",id:"running",level:2},{value:"Examples",id:"examples",level:2}],c={toc:l},d="wrapper";function m(e){let{components:o,...n}=e;return(0,r.yg)(d,(0,a.A)({},c,n,{components:o,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Hypermod is specifically designed to play nicely with monorepos (AKA multi-package repositories, multi-project repositories, or monolithic repositories) such as ",(0,r.yg)("a",{parentName:"p",href:"https://turborepo.org/"},"Turborepo"),", ",(0,r.yg)("a",{parentName:"p",href:"https://classic.yarnpkg.com/lang/en/docs/workspaces/"},"Yarn"),", ",(0,r.yg)("a",{parentName:"p",href:"https://docs.npmjs.com/cli/v7/using-npm/workspaces/"},"npm")," and ",(0,r.yg)("a",{parentName:"p",href:"https://pnpm.io/workspaces"},"pnpm")," workspaces and ",(0,r.yg)("a",{parentName:"p",href:"https://lerna.js.org/"},"Lerna"),"."),(0,r.yg)("h2",{id:"configuration"},"Configuration"),(0,r.yg)("p",null,"Configuring Hypermod in a monorepo can be done in the exact same way as ",(0,r.yg)("a",{parentName:"p",href:"/docs/authoring#2-add-hypermod-to-an-existing-package"},"any existing npm package"),", simply by adding ",(0,r.yg)("inlineCode",{parentName:"p"},"hypermod.config.js")," files and codemods to your packages."),(0,r.yg)("p",null,"Given you are using a workspace-based monorepo, it's recommended to co-locate codemods with your package source files so they can be published as part of the package, for use by both external and internal users."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-diff"},"packages/\n    button/\n+        codemods/\n+          1.0.0/\n+           transform.ts\n+           transform.spec.ts\n+          2.0.0/\n+          hypermod.config.js\n        src/\n            ...\n        package.json\n        rollup.config.json\n        jest.config.js\n    dialog/\n    modal/\n\npackage.json\n")),(0,r.yg)("p",null,"Hypermod config files can be located in either the root, ",(0,r.yg)("inlineCode",{parentName:"p"},"/src")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"/codemods")," directory of a package."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-diff"},"packages/\n    button/\n+        codemods/\n+          1.0.0/\n+          2.0.0/\n        src/\n            ...\n        package.json\n        rollup.config.json\n        jest.config.js\n+       hypermod.config.js\n    dialog/\n    modal/\n\npackage.json\n")),(0,r.yg)("p",null,"The structure or use of the ",(0,r.yg)("inlineCode",{parentName:"p"},"/codemods")," directory is entirely up to you. Codemods can be located anywhere in the package as long as the config file correctly\npoints to them."),(0,r.yg)("p",null,"See the ",(0,r.yg)("a",{parentName:"p",href:"/docs/configuration"},"configuration guide")," for help writing config files."),(0,r.yg)("h2",{id:"initializing"},"Initializing"),(0,r.yg)("p",null,"Hypermod provides a CLI to quickly codegen a working codemod package around your existing source files. To do so, run ",(0,r.yg)("inlineCode",{parentName:"p"},"init")," with the ",(0,r.yg)("inlineCode",{parentName:"p"},"--config-only")," flag,\nwhich will output a bare-bones configuration. If you provide a ",(0,r.yg)("inlineCode",{parentName:"p"},"--transform")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"--preset")," it will also generate empty transform files in addition."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"$ hypermod init --config-only --transform 10.0.0 --preset foobar packages/my-package")),(0,r.yg)("p",null,"(Note: this script assumes you have installed ",(0,r.yg)("inlineCode",{parentName:"p"},"@hypermod/cli")," globally)"),(0,r.yg)("p",null,"The output of this command will give you a filestructure matching the above example."),(0,r.yg)("h2",{id:"development"},"Development"),(0,r.yg)("p",null,"When writing codemod(s) it's recommended to use a ",(0,r.yg)("a",{parentName:"p",href:"/docs/testing"},"test-driven development approach")," before attempting to run on any real source code.\nOnce you're confident that your codemod works as expected, you will likely want to manually verify against real code.\nThat's where you can use the following command:"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"$ hypermod path/to/test/code"),"."),(0,r.yg)("p",null,"When used at the root directory of your monorepo, the CLI will leverage your workspaces config located in your ",(0,r.yg)("inlineCode",{parentName:"p"},"package.json")," to determine which codemods in the monorepo it can run."),(0,r.yg)("p",null,"ie:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "monorepo",\n  "version": "1.0.0",\n  "workspaces": ["docs", "apps/*", "packages/*"]\n}\n')),(0,r.yg)("p",null,"And show an interactive list for you to search and can choose from."),(0,r.yg)("h2",{id:"publishing"},"Publishing"),(0,r.yg)("p",null,"The workflow to publishing your codemod enhanced packages should remain completely unchanged.\nHowever, it's important to verify that your ",(0,r.yg)("inlineCode",{parentName:"p"},"hypermod.config.js")," and codemods are not ignored by npm (via ",(0,r.yg)("inlineCode",{parentName:"p"},".npmignore")," or similar) so that they are successfully published to the registry."),(0,r.yg)("p",null,"In some cases you may need to add these to the ",(0,r.yg)("inlineCode",{parentName:"p"},"files")," property of your package's ",(0,r.yg)("inlineCode",{parentName:"p"},"package.json")," like so:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "@monorepo/my-package",\n  "version": "0.6.0",\n  "main": "./dist/index.js",\n  "files": ["dist", "src", "codemods", "hypermod.config.js"]\n}\n')),(0,r.yg)("h2",{id:"running"},"Running"),(0,r.yg)("p",null,"Running a codemod as a consumer can now be done via the ",(0,r.yg)("inlineCode",{parentName:"p"},"@hypermod/cli"),", assuming your package is named ",(0,r.yg)("inlineCode",{parentName:"p"},"@monorepo/my-package")," and your codemod is ",(0,r.yg)("inlineCode",{parentName:"p"},"1.0.0"),":"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"$ hypermod --packages @monorepo/my-package@1.0.0 /path/to/source")),(0,r.yg)("p",null,"You can even omit the codemod name to be prompted with all codemods as an interactive list:"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"$ hypermod --packages @monorepo/my-package /path/to/source")),(0,r.yg)("h2",{id:"examples"},"Examples"),(0,r.yg)("p",null,"Here are some helpful examples of this setup working in the wild:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/atlassian-labs/compiled/tree/master/packages/codemods"},"Compiled codemods")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/webdriverio/codemod"},"Webdriver.io codemods"))))}m.isMDXComponent=!0}}]);