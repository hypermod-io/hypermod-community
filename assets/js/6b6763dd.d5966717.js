"use strict";(self.webpackChunkcodeshift_community=self.webpackChunkcodeshift_community||[]).push([[7190],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=s(n),m=o,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[p]="string"==typeof e?e:o,a[1]=u;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2250:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return s}});var r=n(3117),o=(n(7294),n(3905));const i={id:"contribution",title:"Contribution",slug:"/contribution",description:"Learn how to contribute codemods. This page covers the process of authoring and publishing codemods, including tips and best practices for creating high-quality codemods that others can use and benefit from.",keywords:["codemod","contribution","authoring","publishing","tips","best practices"]},a=void 0,u={unversionedId:"contribution",id:"contribution",title:"Contribution",description:"Learn how to contribute codemods. This page covers the process of authoring and publishing codemods, including tips and best practices for creating high-quality codemods that others can use and benefit from.",source:"@site/docs/contribution.mdx",sourceDirName:".",slug:"/contribution",permalink:"/docs/contribution",draft:!1,editUrl:"https://github.com/hypermod-io/hypermod-community/edit/main/website/docs/contribution.mdx",tags:[],version:"current",frontMatter:{id:"contribution",title:"Contribution",slug:"/contribution",description:"Learn how to contribute codemods. This page covers the process of authoring and publishing codemods, including tips and best practices for creating high-quality codemods that others can use and benefit from.",keywords:["codemod","contribution","authoring","publishing","tips","best practices"]},sidebar:"docs",previous:{title:"Motions",permalink:"/docs/motions"},next:{title:"External Packages",permalink:"/docs/external-packages"}},l={},s=[{value:"Getting setup",id:"getting-setup",level:2},{value:"Initializing",id:"initializing",level:2},{value:"File structure",id:"file-structure",level:3},{value:"Writing a transformer",id:"writing-a-transformer",level:2},{value:"Testing",id:"testing",level:2},{value:"Publishing",id:"publishing",level:2}],c={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This page covers the process of authoring and publishing codemods, including tips and best practices for creating high-quality codemods that others can use and benefit from."),(0,o.kt)("p",null,"It is intended to explain in detail contribution to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/hypermod-io/hypermod-community/tree/main/community"},"the public registry")," and is for authors who want:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Codemods to be open source"),(0,o.kt)("li",{parentName:"ul"},"Build tooling, dependency management and project setup to be handled for you"),(0,o.kt)("li",{parentName:"ul"},"The community to help maintain and contribute to your codemods"),(0,o.kt)("li",{parentName:"ul"},"Documentation to be automatically generated and available on the ",(0,o.kt)("a",{parentName:"li",href:"registry"},"Registry page"))),(0,o.kt)("p",null,"If you prefer to create codemods outside of this repo, please see the ",(0,o.kt)("a",{parentName:"p",href:"authoring"},"Authoring guide")," for other options."),(0,o.kt)("h2",{id:"getting-setup"},"Getting setup"),(0,o.kt)("p",null,"To get setup, first fork this repository and clone it to your local machine.\nMake sure you have the correct version of node and yarn(1.x) installed.\nFinally, run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn")," to install the dependencies."),(0,o.kt)("h2",{id:"initializing"},"Initializing"),(0,o.kt)("p",null,"Create a new hypermod package automatically by running: ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn hypermod:init -p [package-name] -v [version]")),(0,o.kt)("p",null,"For example: ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn community:init react-cool-library 10.0.0")),(0,o.kt)("p",null,"And for scoped packages: ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn community:init @scope/react-cool-library 10.0.0")),(0,o.kt)("p",null,"You should now see a new folder within the ",(0,o.kt)("inlineCode",{parentName:"p"},"/community")," directory for you to implement your codemod(s)."),(0,o.kt)("h3",{id:"file-structure"},"File structure"),(0,o.kt)("p",null,"The file structure of your new hypermod package will look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"community/react-cool-library/\n  hypermod.config.js // main entrypoint containing configuration and references to your transforms\n  10.0.0/ // semver version\n    transform.ts // main logic (should contain a transformer)\n    transform.spec.ts // main tests\n    motions/ // utility directory\n")),(0,o.kt)("h2",{id:"writing-a-transformer"},"Writing a transformer"),(0,o.kt)("p",null,"The logic for your codemod should be added to the ",(0,o.kt)("inlineCode",{parentName:"p"},"transform.ts")," file."),(0,o.kt)("p",null,"Transformers are the main entrypoint to your codemod, they are responsible for accepting a raw file, applying the appropriate modifications to it and finally outputting the resulting AST to the original file."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { hasImportDeclaration } from '@hypermod/utils';\n\nexport default function transformer(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  if (!hasImportDeclaration(j, source, 'my')) {\n    return file.source; // Writes original untouched file\n  }\n\n  // Do transformation logic here...\n\n  return source.toSource(options.printOptions); // Writes modified AST to file\n}\n")),(0,o.kt)("p",null,"For a more detailed guide, please refer to the ",(0,o.kt)("a",{parentName:"p",href:"your-first-codemod"},"Your First Codemod guide"),"."),(0,o.kt)("h2",{id:"testing"},"Testing"),(0,o.kt)("p",null,"Now to test your transformer, run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn test:watch community/[package-name]"),"."),(0,o.kt)("p",null,"See the ",(0,o.kt)("a",{parentName:"p",href:"testing"},"Testing guide")," for help getting started with unit tests."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Make sure to write a healthy amount of unit tests"),(0,o.kt)("li",{parentName:"ul"},"This is a great opportunity for test driven development"),(0,o.kt)("li",{parentName:"ul"},"Consider different edge-cases, idempotency, different languages (js, flow, typescript)"),(0,o.kt)("li",{parentName:"ul"},"Before you share your changes with the world, be sure to use it yourself")),(0,o.kt)("h2",{id:"publishing"},"Publishing"),(0,o.kt)("p",null,"Once you're happy with your new package and you've tested it appropriately, it's time to raise a PR."),(0,o.kt)("p",null,"When the PR is reviewed and merged, your new package will automatically be published and available via the ",(0,o.kt)("inlineCode",{parentName:"p"},"hypermod/cli"),"."),(0,o.kt)("p",null,"Refer to the ",(0,o.kt)("a",{parentName:"p",href:"consuming"},"Consuming guide")," for information about how to run your new codemods."))}d.isMDXComponent=!0}}]);