"use strict";(self.webpackChunkcodeshift_community=self.webpackChunkcodeshift_community||[]).push([[5782],{4226:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var n=t(4848),r=t(8453);const s={id:"motions",title:"Motions",slug:"/motions"},i=void 0,c={id:"motions",title:"Motions",description:"A motion (aka migration) is what we call specific actions performed within a codemod. For example, updateBorderWidth or removeDeprecatedProps.",source:"@site/docs/motions.mdx",sourceDirName:".",slug:"/motions",permalink:"/hypermod-community/docs/motions",draft:!1,unlisted:!1,editUrl:"https://github.com/hypermod-io/hypermod-community/edit/main/website/docs/motions.mdx",tags:[],version:"current",frontMatter:{id:"motions",title:"Motions",slug:"/motions"},sidebar:"docs",previous:{title:"Testing",permalink:"/hypermod-community/docs/testing"},next:{title:"Contribution",permalink:"/hypermod-community/docs/contribution"}},m={},a=[];function p(e){const o={a:"a",code:"code",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(o.p,{children:["A motion (aka migration) is what we call specific actions performed within a codemod. For example, ",(0,n.jsx)(o.code,{children:"updateBorderWidth"})," or ",(0,n.jsx)(o.code,{children:"removeDeprecatedProps"}),".\nThey can be simply thought of as utility functions that are responsible for a single step within a complex codemod.\nIt is not required to follow this pattern but they are highly recommended as a helpful design pattern to isolate more complicated parts of your codemod into discrete pieces."]}),"\n",(0,n.jsx)(o.p,{children:(0,n.jsx)(o.strong,{children:"Example:"})}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ts",children:"function removeDeprecatedProps(j, source) {\n  // Some logic here\n}\n"})}),"\n",(0,n.jsx)(o.p,{children:"Motions can then be applied from the main transform, just like any other function."}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ts",children:"import { hasImportDeclaration } from '@hypermod/utils';\nimport removeDeprecatedProps from './motions/remove-deprecated-props';\nimport restructureImports from './motions/restructure-imports';\n\nexport default function transformer(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  // Execute individual motions\n  removeDeprecatedProps(j, source);\n  restructureImports(j, source);\n\n  return source.toSource(options.printOptions); // Writes modified AST to file\n}\n"})}),"\n",(0,n.jsxs)(o.p,{children:["Each motion receives a reference to the AST (",(0,n.jsx)(o.code,{children:"source"}),") which it can then manipulate as required since the source variable is passed by reference."]}),"\n",(0,n.jsxs)(o.p,{children:["Alternatively, you can use the utility function ",(0,n.jsx)(o.a,{href:"./utils#applymotionsj-source-motions",children:"applyMotions"})," to run motions in sequence."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ts",children:"import { applyMotions } from '@hypermod/utils';\nimport removeDeprecatedProps from './motions/remove-deprecated-props';\nimport restructureImports from './motions/restructure-imports';\n\nexport default function transformer(file, { jscodeshift: j }, options) {\n  const source = j(file.source);\n\n  // Execute a series of motions in order\n  applyMotions(j, source, [removeDeprecatedProps, restructureImports]);\n\n  return source.toSource(options.printOptions);\n}\n"})})]})}function d(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>i,x:()=>c});var n=t(6540);const r={},s=n.createContext(r);function i(e){const o=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:o},e.children)}}}]);